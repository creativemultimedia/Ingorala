// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'contacts.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2245433682625292416),
      name: 'contacts',
      lastPropertyId: const IdUid(13, 1388948985848149679),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8225854500370215266),
            name: 'id1',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6075801895529118995),
            name: 'id',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 7993814003054915505)),
        ModelProperty(
            id: const IdUid(3, 2630796575238220140),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8597103890557788633),
            name: 'eName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7364357340136138055),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6429393161208403866),
            name: 'homeAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5429859135963370693),
            name: 'contact',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7651827470586299115),
            name: 'contact2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 435457684254287197),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4609864263381508390),
            name: 'business',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 968341878417962334),
            name: 'bAddress',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1388948985848149679),
            name: 'favourite',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 2245433682625292416),
      lastIndexId: const IdUid(1, 7993814003054915505),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [1638978802491922768],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    contacts: EntityDefinition<contacts>(
        model: _entities[0],
        toOneRelations: (contacts object) => [],
        toManyRelations: (contacts object) => {},
        getId: (contacts object) => object.id1,
        setId: (contacts object, int id) {
          object.id1 = id;
        },
        objectToFB: (contacts object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final eNameOffset =
              object.eName == null ? null : fbb.writeString(object.eName!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final homeAddressOffset = object.homeAddress == null
              ? null
              : fbb.writeString(object.homeAddress!);
          final contactOffset =
              object.contact == null ? null : fbb.writeString(object.contact!);
          final contact2Offset = object.contact2 == null
              ? null
              : fbb.writeString(object.contact2!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final businessOffset = object.business == null
              ? null
              : fbb.writeString(object.business!);
          final bAddressOffset = object.bAddress == null
              ? null
              : fbb.writeString(object.bAddress!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id1);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, eNameOffset);
          fbb.addOffset(4, addressOffset);
          fbb.addOffset(5, homeAddressOffset);
          fbb.addOffset(6, contactOffset);
          fbb.addOffset(7, contact2Offset);
          fbb.addOffset(8, imageOffset);
          fbb.addOffset(9, businessOffset);
          fbb.addOffset(10, bAddressOffset);
          fbb.addInt64(12, object.favourite);
          fbb.finish(fbb.endTable());
          return object.id1;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = contacts(
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              eName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              homeAddress: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              contact: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              contact2: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              business: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              bAddress: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24))
            ..id1 = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..favourite = const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [contacts] entity fields to define ObjectBox queries.
class contacts_ {
  /// see [contacts.id1]
  static final id1 = QueryIntegerProperty<contacts>(_entities[0].properties[0]);

  /// see [contacts.id]
  static final id = QueryStringProperty<contacts>(_entities[0].properties[1]);

  /// see [contacts.name]
  static final name = QueryStringProperty<contacts>(_entities[0].properties[2]);

  /// see [contacts.eName]
  static final eName =
      QueryStringProperty<contacts>(_entities[0].properties[3]);

  /// see [contacts.address]
  static final address =
      QueryStringProperty<contacts>(_entities[0].properties[4]);

  /// see [contacts.homeAddress]
  static final homeAddress =
      QueryStringProperty<contacts>(_entities[0].properties[5]);

  /// see [contacts.contact]
  static final contact =
      QueryStringProperty<contacts>(_entities[0].properties[6]);

  /// see [contacts.contact2]
  static final contact2 =
      QueryStringProperty<contacts>(_entities[0].properties[7]);

  /// see [contacts.image]
  static final image =
      QueryStringProperty<contacts>(_entities[0].properties[8]);

  /// see [contacts.business]
  static final business =
      QueryStringProperty<contacts>(_entities[0].properties[9]);

  /// see [contacts.bAddress]
  static final bAddress =
      QueryStringProperty<contacts>(_entities[0].properties[10]);

  /// see [contacts.favourite]
  static final favourite =
      QueryIntegerProperty<contacts>(_entities[0].properties[11]);
}
